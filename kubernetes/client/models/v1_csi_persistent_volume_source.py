# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1.9.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1CSIPersistentVolumeSource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'driver': 'str',
        'read_only': 'bool',
        'volume_handle': 'str'
    }

    attribute_map = {
        'driver': 'driver',
        'read_only': 'readOnly',
        'volume_handle': 'volumeHandle'
    }

    def __init__(self, driver=None, read_only=None, volume_handle=None):
        """
        V1CSIPersistentVolumeSource - a model defined in Swagger
        """

        self._driver = None
        self._read_only = None
        self._volume_handle = None
        self.discriminator = None

        self.driver = driver
        if read_only is not None:
          self.read_only = read_only
        self.volume_handle = volume_handle

    @property
    def driver(self):
        """
        Gets the driver of this V1CSIPersistentVolumeSource.
        Driver is the name of the driver to use for this volume. Required.

        :return: The driver of this V1CSIPersistentVolumeSource.
        :rtype: str
        """
        return self._driver

    @driver.setter
    def driver(self, driver):
        """
        Sets the driver of this V1CSIPersistentVolumeSource.
        Driver is the name of the driver to use for this volume. Required.

        :param driver: The driver of this V1CSIPersistentVolumeSource.
        :type: str
        """
        if driver is None:
            raise ValueError("Invalid value for `driver`, must not be `None`")

        self._driver = driver

    @property
    def read_only(self):
        """
        Gets the read_only of this V1CSIPersistentVolumeSource.
        Optional: The value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).

        :return: The read_only of this V1CSIPersistentVolumeSource.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """
        Sets the read_only of this V1CSIPersistentVolumeSource.
        Optional: The value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).

        :param read_only: The read_only of this V1CSIPersistentVolumeSource.
        :type: bool
        """

        self._read_only = read_only

    @property
    def volume_handle(self):
        """
        Gets the volume_handle of this V1CSIPersistentVolumeSource.
        VolumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.

        :return: The volume_handle of this V1CSIPersistentVolumeSource.
        :rtype: str
        """
        return self._volume_handle

    @volume_handle.setter
    def volume_handle(self, volume_handle):
        """
        Sets the volume_handle of this V1CSIPersistentVolumeSource.
        VolumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.

        :param volume_handle: The volume_handle of this V1CSIPersistentVolumeSource.
        :type: str
        """
        if volume_handle is None:
            raise ValueError("Invalid value for `volume_handle`, must not be `None`")

        self._volume_handle = volume_handle

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1CSIPersistentVolumeSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
